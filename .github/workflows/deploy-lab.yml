name: Azure Firewall TLS Lab - CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      region:
        description: 'Azure Region'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - westus2
        - centralus
        - eastus2
      deploy_vms:
        description: 'Deploy VMs (CA Server & Client)'
        required: true
        default: true
        type: boolean

env:
  AZURE_RESOURCE_GROUP: rg-azfw-tls-lab-${{ github.event.inputs.environment || 'dev' }}
  AZURE_LOCATION: ${{ github.event.inputs.region || 'eastus' }}
  
jobs:
  validate:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az version
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Validate Main Bicep Template
      run: |
        echo "🔍 Validating main Bicep template..."
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file bicep/main.bicep \
          --parameters bicep/parameters/lab.parameters.json \
          --parameters location=${{ env.AZURE_LOCATION }}
    
    - name: Validate VM Bicep Template
      if: ${{ github.event.inputs.deploy_vms == 'true' || github.event.inputs.deploy_vms == '' }}
      run: |
        echo "🔍 Validating VM Bicep template..."
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}-west \
          --template-file bicep/west-vms.bicep \
          --parameters bicep/parameters/lab.parameters.json \
          --parameters location=westus2

  security-scan:
    name: Security & Best Practices Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bicep Security Scan
      run: |
        echo "🔒 Running security checks on Bicep templates..."
        
        # Check for hardcoded secrets
        echo "Checking for hardcoded secrets..."
        if grep -r "password\|secret\|key" bicep/ --include="*.bicep" --exclude-dir=".git"; then
          echo "⚠️  Warning: Potential hardcoded secrets found"
        else
          echo "✅ No hardcoded secrets detected"
        fi
        
        # Check for secure defaults
        echo "Checking for secure configuration..."
        if grep -q "Standard_LRS\|Standard_GRS" bicep/; then
          echo "✅ Secure storage configuration found"
        fi
        
        # Check for proper network security
        if grep -q "Microsoft.Network/networkSecurityGroups" bicep/; then
          echo "✅ Network Security Groups configured"
        fi

  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    outputs:
      firewall-ip: ${{ steps.deploy.outputs.firewall-ip }}
      keyvault-name: ${{ steps.deploy.outputs.keyvault-name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create Resource Groups
      run: |
        echo "🏗️  Creating resource groups..."
        az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
        az group create --name ${{ env.AZURE_RESOURCE_GROUP }}-west --location westus2
    
    - name: Deploy Main Infrastructure
      id: deploy
      run: |
        echo "🚀 Deploying main infrastructure..."
        
        # Deploy main infrastructure
        DEPLOYMENT_OUTPUT=$(az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file bicep/main.bicep \
          --parameters bicep/parameters/lab.parameters.json \
          --parameters location=${{ env.AZURE_LOCATION }} \
          --query 'properties.outputs' \
          --output json)
        
        echo "Deployment output: $DEPLOYMENT_OUTPUT"
        
        # Extract outputs
        FIREWALL_IP=$(echo $DEPLOYMENT_OUTPUT | jq -r '.firewallPublicIP.value // empty')
        KEYVAULT_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.keyVaultName.value // empty')
        
        echo "firewall-ip=$FIREWALL_IP" >> $GITHUB_OUTPUT
        echo "keyvault-name=$KEYVAULT_NAME" >> $GITHUB_OUTPUT
        
        echo "✅ Main infrastructure deployed successfully"
        echo "🔥 Firewall IP: $FIREWALL_IP"
        echo "🔐 Key Vault: $KEYVAULT_NAME"
    
    - name: Deploy VMs (Multi-Region)
      if: ${{ github.event.inputs.deploy_vms == 'true' || github.event.inputs.deploy_vms == '' }}
      run: |
        echo "🖥️  Deploying VMs to West US 2..."
        
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}-west \
          --template-file bicep/west-vms.bicep \
          --parameters bicep/parameters/lab.parameters.json \
          --parameters location=westus2
        
        echo "✅ VMs deployed successfully in West US 2"

  test-deployment:
    name: Test & Validate Deployment
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Run Deployment Tests
      run: |
        echo "🧪 Running deployment validation tests..."
        
        # Make scripts executable
        chmod +x scripts/*.sh
        
        # Run validation script
        ./scripts/validate-lab.sh
        
        echo "✅ Deployment tests completed"
    
    - name: Generate Deployment Report
      run: |
        echo "📊 Generating deployment report..."
        
        # Create deployment report
        cat > deployment-report.md << EOF
        # Deployment Report
        
        **Date:** $(date)
        **Environment:** ${{ github.event.inputs.environment || 'dev' }}
        **Region:** ${{ env.AZURE_LOCATION }}
        **Commit:** ${{ github.sha }}
        
        ## Resources Deployed
        
        - ✅ Azure Firewall Premium
        - ✅ Key Vault: ${{ needs.deploy-infrastructure.outputs.keyvault-name }}
        - ✅ Virtual Networks (Multi-region)
        - ✅ Firewall Public IP: ${{ needs.deploy-infrastructure.outputs.firewall-ip }}
        
        ## Next Steps
        
        1. Configure Enterprise CA
        2. Generate TLS certificates
        3. Configure TLS inspection policies
        4. Run end-to-end tests
        
        EOF
        
        echo "📋 Deployment report generated"
    
    - name: Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.run_number }}
        path: deployment-report.md

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, test-deployment]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: ${{ needs.deploy-infrastructure.result == 'success' && needs.test-deployment.result == 'success' }}
      run: |
        echo "🎉 Deployment successful!"
        echo "🔥 Firewall IP: ${{ needs.deploy-infrastructure.outputs.firewall-ip }}"
        echo "🔐 Key Vault: ${{ needs.deploy-infrastructure.outputs.keyvault-name }}"
        echo "🚀 Ready for TLS configuration and testing!"
    
    - name: Deployment Failure Notification
      if: ${{ needs.deploy-infrastructure.result == 'failure' || needs.test-deployment.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and retry."
